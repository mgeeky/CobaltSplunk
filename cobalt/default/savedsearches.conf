[default]
disabled = 0

[ATT&CK - Command Line T1059]
display.visualizations.type = mapping
alert.track = 0
display.general.type = statistics
action.email.useNSSubject = 1
search = index=cobalt sourcetype=beacon_log \
| stats values(command) as command values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| rex max_match=0 field=command "^(?<lines>.+)\n*" \
| mvexpand lines \
| rename lines as command \
| search command="shell *"\
| stats values(command) as command values(external_ip) as external_ip values(internal_ip) as internal_ip by computer\
| table computer command external_ip internal_ip
display.page.search.tab = statistics
description = Search for tactic T1059 - command line usage across beacon logs.
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
request.ui_dispatch_app = cobalt

[ATT&CK - Credential Dumping]
display.visualizations.type = mapping
alert.track = 0
display.general.type = statistics
action.email.useNSSubject = 1
search = index=cobalt sourcetype=beacon_log \
| stats values(command) as command values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| rex max_match=0 field=command "^(?<lines>.+)\n*" \
| mvexpand lines \
| rename lines as command \
| search (command="hashdump" OR command="logonpasswords" OR command="dump hashes" OR command="run mimikatz's *" OR command="lsadump") AND command!="*sekurlsa::pth*"\
| stats values(command) as command values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
|  stats values(command) as command values(external_ip) as external_ip values(internal_ip) as internal_ip by computer
display.page.search.tab = statistics
description = Search for tactic T1003 - Credential Dumping
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
request.ui_dispatch_app = cobalt

[ATT&CK - DLL Injection T1055]
display.visualizations.type = mapping
alert.track = 0
display.visualizations.charting.chart = bar
display.events.fields = ["host","source","sourcetype","command"]
search = index=cobalt sourcetype=beacon_log \
| stats values(command) as command values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| rex max_match=0 field=command "^(?<lines>.+)\n*" \
| mvexpand lines \
| rename lines as command \
| search command="inject *" OR command="run mimikatz's*" OR command="dump hashes" OR command="hashdump" \
OR command="browserpivot *" OR command="dllinject *" OR command="dllload *" OR command="shinject *"\
| stats values(command) as command values(external_ip) as external_ip values(internal_ip) as internal_ip by computer | table computer command external_ip internal_ip
action.email.useNSSubject = 1
display.general.type = statistics
display.page.search.tab = statistics
description = Search for tactic T1055 - DLL Injection
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
display.page.search.mode = fast

[ATT&CK - Download File (T1005)]
display.visualizations.type = mapping
alert.track = 0
display.visualizations.charting.chart = bar
display.events.fields = ["host","source","sourcetype","command"]
search = index=cobalt sourcetype=beacon_log \
| stats values(_raw) as _raw values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| rex max_match=0 field=_raw "^(?<lines>.+)\n*" \
| mvexpand lines \
| rename lines as command \
| rex field=command "^[/A-Z0-9:\s]+\[task\]\s*<[^>]*>\s*Tasked\s+Beacon\s+toTasked beacon to (?<file>.*)" \
| search file="download *" \
| stats values(file) as file count values(external_ip) as external_ip values(internal_ip) as internal_ip by computer \
| rename count as download_count \
| table computer file download_count external_ip internal_ip
action.email.useNSSubject = 1
display.general.type = statistics
display.page.search.tab = statistics
description = Search for tactic T1005 - Download File
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
display.page.search.mode = fast

[ATT&CK - Process Hollowing (T1093)]
display.visualizations.type = mapping
alert.track = 0
display.visualizations.charting.chart = bar
display.events.fields = ["host","source","sourcetype","command"]
search = index=cobalt sourcetype=beacon_log \
| stats values(command) as command values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source | rex max_match=0 field=command "^(?<lines>.+)\n*" \
| mvexpand lines \
| rename lines as command | search command="spawn *" OR command="covertvpn" OR command="ssh *" OR command="ssh-key *" OR command="ppid *" OR command="spawnto *" OR command="shspawn *" OR command="bypassuac *"\
| stats values(command) as command values(external_ip) as external_ip values(internal_ip) as internal_ip by computer | table computer command external_ip internal_ip
action.email.useNSSubject = 1
display.general.type = statistics
display.page.search.tab = statistics
description = Search for tactic T1093 - Process Hollowing
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
display.page.search.mode = fast

[ATT&CK - Service Manipulation (T1050, T1035)]
display.visualizations.type = mapping
alert.track = 0
display.visualizations.charting.chart = bar
display.events.fields = ["host","source","sourcetype","command"]
search = index=cobalt sourcetype=beacon_log \
| stats values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip values(_raw) as _raw by source \
| rex max_match=0 field=_raw "^(?<lines>.+)\n*" | mvexpand lines \
| table computer lines external_ip internal_ip | rex field=lines "[0-9a-z\:\ \/]+(?:[A-Z]+\s*)(?<message>.*)" \
| rex field=message mode=sed "s/\<.*\>//g" \
| rex field=message mode=sed "s/\[.*\]//g" \
| search message="*psexec*" OR message="*get system*" OR message="*get system*" OR message="*-Service *" OR message="*scshell*" OR message="*createservice*" OR message="*modsvc*" OR message="*sharpsc*" OR message="* sc * "OR message="* sc_*" \
| stats values(message) as message values(external_ip) as external_ip values(internal_ip) as internal_ip by computer \
| table computer message external_ip internal_ip
action.email.useNSSubject = 1
display.general.type = statistics
display.page.search.tab = statistics
description = Search for tactics T1050, T1035 - Service Manipulation
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
display.page.search.mode = fast

[ATT&CK - Upload File]
display.visualizations.type = mapping
alert.track = 0
display.visualizations.charting.chart = bar
display.events.fields = ["host","source","sourcetype","command"]
search = index=cobalt sourcetype=beacon_log \
| stats values(_raw) as _raw values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| rex max_match=0 field=_raw "^(?<lines>.+)\n*" \
| mvexpand lines \
| rename lines as command \
| rex field=command "^[/A-Z0-9:\s]+\[task\]\s*<[^>]*>\s*Tasked\s+Beacon\s+to\s+(?<file>.*)" \
| search file="upload *" \
| stats values(file) as file count values(external_ip) as external_ip values(internal_ip) as internal_ip by computer \
| rename count as upload_count \
| table computer file upload_count external_ip internal_ip
action.email.useNSSubject = 1
display.general.type = statistics
display.page.search.tab = statistics
description = Search for tactic - Upload File
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
display.page.search.mode = fast

[ATT&CK - Pass-The-Hash (T1075)]
display.visualizations.type = mapping
alert.track = 0
display.visualizations.charting.chart = bar
display.events.fields = ["host","source","sourcetype","command"]
search = index=cobalt sourcetype=beacon_log \
| stats values(command) as command values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| rex max_match=0 field=command "^(?<lines>.+)\n*" \
| mvexpand lines \
| rename lines as command \
| search command="*sekurlsa::pth*" OR command="* pth *" OR command="*invoke-smbexec*" OR command="*sharpexec*" OR command="*invoke-wmiexec*" OR command="*invoke-thehash*" \
| rex field=command mode=sed "s/run mimikatz's sekurlsa::pth //g" \
| rex field=command mode=sed "s/\/run.*//g" \
| stats values(command) as command values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
|  stats values(command) as command values(external_ip) as external_ip values(internal_ip) as internal_ip by computer
action.email.useNSSubject = 1
display.general.type = statistics
display.page.search.tab = statistics
description = Search for tactic T1075 - Pass-The-Hash
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
display.page.search.mode = fast

[ATT&CK - PowerShell Usage (T1086)]
display.visualizations.type = mapping
alert.track = 0
display.visualizations.charting.chart = bar
display.events.fields = ["host","source","sourcetype","command"]
search = index=cobalt sourcetype=beacon_log \
| stats values(command) as command values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| rex max_match=0 field=command "^(?<lines>.+)\n*" \
| mvexpand lines \
| rename lines as command \
| search command="powershell *" OR command="powershell-import *" OR command="powerpick *" OR command="psexec_psh *" OR command="wmi *" OR command="psh *" OR command="psinject *" OR command="winrm *"\
| stats values(command) as command values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
|  stats values(command) as command values(external_ip) as external_ip values(internal_ip) as internal_ip by computer
action.email.useNSSubject = 1
display.general.type = statistics
display.page.search.tab = statistics
description = Search for tactic T1086 - PowerShell Usage
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
display.page.search.mode = fast

[ATT&CK - WMI (T1047)]
display.visualizations.type = mapping
alert.track = 0
display.visualizations.charting.chart = bar
display.page.search.tab = statistics
search = index=cobalt sourcetype=beacon_log \
| stats values(command) as command values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| rex max_match=0 field=command "^(?<lines>.+)\n*" \
| mvexpand lines \
| rename lines as command \
| search command="shell wmic *" OR command="* wmi *" OR command="*wmi_query*" OR command="*sharpsc*" OR command="*sharpwmi*" OR command="wmi *"\
| stats values(command) as command values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
|  stats values(command) as command values(external_ip) as external_ip values(internal_ip) as internal_ip by computer
action.email.useNSSubject = 1
display.general.type = statistics
display.events.fields = ["host","source","sourcetype","command"]
description = Search for tactic T1047 - WMI
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0

[Beacon - First Compromised]
display.visualizations.type = mapping
alert.track = 0
display.visualizations.charting.chart = bar
display.page.search.tab = statistics
search = index=cobalt sourcetype=beacon_log type=metadata \
| rex field=_raw "^[/A-Z0-9:\s]+\[metadata\]\s*(?P<external_ip>[^ ]+)\s+[<>-]+\s+(?P<internal_ip>[^;]+);\s*computer:\s*\b(?P<computer>[^;]+);\s*user:\s*\b(?P<user>[^;]+);\s*process:\s*\b(?P<process_name>[^;]+);\s*pid:\s*\b(?<process_id>[^;]+);\s*os:\s*\b(?<os_main>[^;]+);\s*version:\s*\b(?P<os_version>[^;]+)(?:;\s*build:\s*\b(?P<os_build>[^;]+))?;\s*beacon\s+arch:\s*(?P<beacon_arch>[^\s]+)" \
|  stats earliest(_time) as first_compromised values(external_ip) as external_ip values(internal_ip) as internal_ip values(user) as user values(os_main) as os values(os_build) as os_build by computer \
|  eval first_compromised=strftime(first_compromised,"%Y-%m-%d %H:%M:%S")
action.email.useNSSubject = 1
display.general.type = statistics
display.events.fields = ["host","source","sourcetype","command"]
description = Beacon - Compromised
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0

[Teamserver - Initial Beacons]
display.visualizations.type = mapping
alert.track = 0
display.visualizations.charting.chart = bar
display.page.search.tab = statistics
search = index=cobalt sourcetype=teamserver_events event="*" \
| search event="*initial*" \
| rex field=_raw "^(?:\d+/\d+\s+\d+:\d+:\d+)\s+\w+\s+\*\*\*\s+initial\s+beacon\s+from\s+(?P<user>[^@]+)@(?P<ip>[^[\s]+)\s+\((?P<computer>[^\)]+)\)" \
| stats earliest(_time) as first_initial_beacon values(user) as user values(ip) as ip by computer \
| table first_initial_beacon computer user ip  \
| eval first_initial_beacon=strftime(first_initial_beacon, "%Y-%m-%d %H:%M:%S") \
| sort _time
action.email.useNSSubject = 1
display.general.type = statistics
display.events.fields = ["host","source","sourcetype","command"]
description = Initial Beacon events reported to Teamserver's event log grouped by their first-seen timestamp.
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0

[Beacon - Compromised Hosts]
display.visualizations.type = mapping
alert.track = 0
display.visualizations.charting.chart = bar
display.page.search.tab = statistics
search = index=cobalt sourcetype=beacon_log type=metadata \
| rex field=_raw "^[/A-Z0-9:\s]+\[metadata\]\s*(?P<external_ip>[^ ]+)\s+[<>-]+\s+(?P<internal_ip>[^;]+);\s*computer:\s*\b(?P<computer>[^;]+);\s*user:\s*\b(?P<user>[^;]+);\s*process:\s*\b(?P<process_name>[^;]+);\s*pid:\s*\b(?<process_id>[^;]+);\s*os:\s*\b(?<os_main>[^;]+);\s*version:\s*\b(?P<os_version>[^;]+)(?:;\s*build:\s*\b(?P<os_build>[^;]+))?;\s*beacon\s+arch:\s*(?P<beacon_arch>[^\s]+)" \
|  stats values(external_ip) as external_ip values(internal_ip) as internal_ip values(user) as user values(process_name) as process_name values(os_main) as os_main values(os_build) as os_build values(beacon_arch) as beacon_arch by computer \
|  sort _time
action.email.useNSSubject = 1
display.general.type = statistics
display.events.fields = ["host","source","sourcetype","command"]
description = Beacon - Compromised
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0

[Beacon Commands and Output by Beacon]
display.visualizations.type = mapping
alert.track = 0
display.general.type = statistics
action.email.useNSSubject = 1
search = index=cobalt sourcetype=beacon_log \
| rex field=output mode=sed "s/^\d+\/\d+\s+\d+:\d+:\d+\s+UTC\s+\[output\]//g" \
| rex field=output mode=sed "s/received\s+output://g" \
| stats values(command) as command values(output) as output by source
display.page.search.tab = statistics
description = Beacon Commands and Output by Beacon
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
request.ui_dispatch_app = cobalt

[Beacon OPSEC-unsafe Statistics]
display.visualizations.type = mapping
alert.track = 0
display.general.type = statistics
action.email.useNSSubject = 1
search = index=cobalt sourcetype=beacon_log \
| stats values(command) as command values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| rex max_match=0 field=command "^(?<lines>.+)\n*" \
| mvexpand lines \
| rename lines as command \
| search command="shell *" OR command="powershell *" OR command="logonpasswords" OR command="mimikatz *" OR command="pth *" OR command="psh *" OR command="jump *" OR command="hashdump *" OR command="dcsync *" OR command="elevate *" OR command="getsystem *" OR command="psinject *" \
| stats values(command) as command values(external_ip) as external_ip values(internal_ip) as internal_ip by computer \
| table computer command external_ip internal_ip
display.page.search.tab = statistics
description = Generates statistics of Beacon OPSEC-unsafe used commands
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
request.ui_dispatch_app = cobalt

[Beacon External IP on Map]
display.visualizations.type = mapping
alert.track = 0
display.general.type = visualizations
action.email.useNSSubject = 1
search = index=cobalt sourcetype=beacon_log \
| iplocation external_ip \
| geostats count by City
display.page.search.tab = visualizations
description = Beacon External IP on Map
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.statistics.show = 0
request.ui_dispatch_app = cobalt

[Beacon Log Metadata Template]
display.visualizations.type = mapping
alert.track = 0
description = Beacon Log Metadata Template
request.ui_dispatch_view = search
dispatch.earliest_time = 0
action.email.useNSSubject = 1
display.visualizations.show = 0
search = index=cobalt sourcetype=beacon_log type=metadata \
| rex field=_raw "^[/A-Z0-9:\s]+\[metadata\]\s*(?P<external_ip>[^ ]+)\s+[<>-]+\s+(?P<internal_ip>[^;]+);\s*computer:\s*\b(?P<computer>[^;]+);\s*user:\s*\b(?P<user>[^;]+);\s*process:\s*\b(?P<process_name>[^;]+);\s*pid:\s*\b(?<process_id>[^;]+);\s*os:\s*\b(?<os_main>[^;]+);\s*version:\s*\b(?P<os_version>[^;]+)(?:;\s*build:\s*\b(?P<os_build>[^;]+))?;\s*beacon\s+arch:\s*(?P<beacon_arch>[^\s]+)" \
|  fields external_ip internal_ip computer user process_name process_id os_main os_version os_build beacon_arch
request.ui_dispatch_app = cobalt

[Indicators of Compromise Summary (IOCs)]
display.visualizations.type = mapping
alert.track = 0
action.script = 1
action.script.filename = virustotal.py
display.visualizations.charting.chart = bar
display.page.search.tab = statistics
search = index=cobalt sourcetype=beacon_log \
| stats values(_raw) as _raw values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| rex max_match=0 field=_raw "^(?<lines>.+)\n*" \
| rename lines as command \
| rex field=command "^[/A-Z0-9:\s]+\[indicator\]\s*(?P<ioc_type>[^:]+):\s+(?P<ioc>[^\s]+)\s+(?P<ioc_size>\d+)\s+bytes\s+(?P<ioc_name>.*)" \
| search ioc="*" \
| dedup ioc \
| table host computer ioc_type ioc ioc_size ioc_name source \
| sort ioc 
| join type=left host \
[ | search ioc="*" \
| table host ioc_type ioc ioc_size ioc_name source \
| sort host ] \
| sort computer, host \
| rex field=source "\d{6}/(?<host>[a-zA-Z-\._0-9]+)/\w+"
action.email.useNSSubject = 1
display.general.type = mapping
description = Summary of IOCs collected from Beacon logs
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0

[Beacon - ATT&CK Tactics]
display.visualizations.type = mapping
alert.track = 0
display.visualizations.charting.chart = bar
display.page.search.tab = statistics
search = index=cobalt sourcetype=beacon_log \
| stats values(_raw) as _raw values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| rex max_match=0 field=_raw "^(?<lines>.+)\n*" \
| mvexpand lines \
| rename lines as command \
| rex field=command "^[/A-Z0-9:\s]+\[task\]\s*<(?P<tactic>[^>]+)>" \
| search tactic="*" \
| stats values(tactic) as tactic values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| table computer tactic external_ip internal_ip source
action.email.useNSSubject = 1
display.general.type = mapping
description = Beacon - ATT&CK Tactics
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0

[Beacon logs by beacon]
display.general.type = statistics
dispatch.latest_time = rt
action.email.useNSSubject = 1
search = index=cobalt sourcetype=beacon_log \
|  stats count(type) as num_of_events by source \
|  sort -num_of_events
display.page.search.tab = statistics
alert.track = 0
description = Beacon logs by beacon
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
request.ui_dispatch_app = cobalt

[Beacon Number of Commands by Operator]
display.general.type = statistics
dispatch.latest_time = rt
action.email.useNSSubject = 1
search = index=cobalt sourcetype=beacon_log \
| stats values(_raw) as _raw values(computer) as computer values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| rex max_match=0 field=_raw "^(?<lines>.+)\n*" \
| mvexpand lines \
| rename lines as command \
| rex field=command "^[/A-Z0-9:\s]+\[input\]\s*<(?P<operator>[^>]+)>\s*(?P<input_command>.*)" \
| search input_command="*" \
| stats count(command) as num_of_commands by computer, operator \
| table operator computer num_of_commands \
| sort -num_of_commands
display.page.search.tab = statistics
alert.track = 0
description = Beacon Number of Commands by Operator
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
request.ui_dispatch_app = cobalt

[Beacon Commands by Operator]
display.general.type = statistics
dispatch.latest_time = rt
action.email.useNSSubject = 1
search = index=cobalt sourcetype=beacon_log \
| stats values(_raw) as _raw values(computer) as computer values(user) as user values(external_ip) as external_ip values(internal_ip) as internal_ip by source \
| rex max_match=0 field=_raw "^(?<lines>.+)\n*" \
| mvexpand lines \
| rename lines as command \
| rex field=command "^(?P<date_time>\d+/\d+\s+\d+:\d+:\d+)\s+\w+\s+\[input\]\s*<(?P<operator>[^>]+)>\s*(?P<input_command>.*)" \
| search input_command="*" \
| table date_time operator computer user input_command source \
| eval date_time=strftime(strptime(date_time, "%d/%m %H:%M:%S"), "%Y-%m-%d %H:%M:%S")
display.page.search.tab = statistics
alert.track = 0
description = Beacon Commands by Operator
request.ui_dispatch_view = search
dispatch.earliest_time = rt
display.visualizations.show = 0
request.ui_dispatch_app = cobalt

[Teamserver Operators]
display.general.type = statistics
dispatch.latest_time = rt
action.email.useNSSubject = 1
search = index=cobalt sourcetype=teamserver_events event="*" \
| search event="*joined*" \
| rex field=_raw "^(?:\d+/\d+\s+\d+:\d+:\d+)\s+\w+\s+\*\*\*\s+(?P<operator>[^\s]+)\s+(?:\([^\)]+\)\s*)?joined" \
| search operator="*" \
| stats count(operator) as num_of_joins by operator \
| sort -num_of_joins
display.page.search.tab = statistics
alert.track = 0
description = Operators that authenticated to the Teamserver and were reported with -joined event.
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
request.ui_dispatch_app = cobalt

[Teamserver Chat]
display.general.type = statistics
dispatch.latest_time = rt
action.email.useNSSubject = 1
search = index=cobalt sourcetype=teamserver_events message="*" \
| table _time operator message \
| sort _time
display.page.search.tab = statistics
alert.track = 0
description = Teamserver Chat messages combined.
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
request.ui_dispatch_app = cobalt

[Teamserver Hosted Files]
display.general.type = statistics
dispatch.latest_time = rt
action.email.useNSSubject = 1
search = index=cobalt sourcetype=teamserver_events event="*" \
| search event="*hosted*" \
| rex field=_raw "^(?:\d+/\d+\s+\d+:\d+:\d+)\s+\w+\s+\*\*\*\s+(?P<operator>[^\s]+)\s+hosted\s+file\s+(?P<file>.*)" \
| search file="*" \
| table host operator file \
| sort host
display.page.search.tab = statistics
alert.track = 0
description = Files hosted on Teamserver.
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
request.ui_dispatch_app = cobalt

[Screenshots]
display.general.type = statistics
dispatch.latest_time = rt
action.email.useNSSubject = 1
search = index=cobalt sourcetype=screenshots \
| eval screenshot_path=replace(source, "/screenshots.log", "/screenshots/" + screenshot) \
| table _time computer user screenshot_title screenshot_path \
| sort _time
display.page.search.tab = statistics
alert.track = 0
description = List of screenshots collected along with their filesystem paths.
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
request.ui_dispatch_app = cobalt

[Beacon SSH Login]
action.pushover.param.priority = 1
alert.track = 1
alert.severity = 5
enableSched = 1
request.ui_dispatch_app = cobalt
action.pushover.param.sound = pushover
search = index=cobalt Accepted from \
|  head 1 \
|  fields _raw
dispatch.latest_time = rt
alert.digest_mode = 0
action.pushover = 1
request.ui_dispatch_view = search
description = SSH Login
dispatch.earliest_time = rt
cron_schedule = * * * * *
action.pushover.param.message = $result._raw$
alert.suppress = 0
description = Beacon SSH Login success

[Web Log IR User Agent by IP]
display.visualizations.type = mapping
display.page.search.tab = statistics
alert.track = 0
search = index=cobalt sourcetype=weblog \
    user_agent="*curl*" OR user_agent="*wget*"\
| stats count values(user_agent) as user_agent by ip
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
description = Web Log IR User Agent by IP
dispatch.earliest_time = 0
action.email.useNSSubject = 1
display.visualizations.show = 0
display.general.type = statistics

[Web Log IR User Agent to Whois]
display.visualizations.type = mapping
display.page.search.tab = statistics
alert.track = 0
search = index=cobalt sourcetype=weblog \
    user_agent="*curl*" OR user_agent="*wget*"\
| stats count values(user_agent) as user_agent by ip \
| centralopswhois output=fields ip | table ip count user_agent ip_country ip_city ip_netname ip_orgname
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
description = Web Log IR User Agent to Whois
dispatch.earliest_time = 0
action.email.useNSSubject = 1
display.visualizations.show = 0
display.general.type = statistics

[Web Log User Agent Count by IP]
display.visualizations.type = mapping
display.page.search.tab = statistics
alert.track = 0
search = index=cobalt sourcetype=weblog \
| stats count values(user_agent) by ip
request.ui_dispatch_app = cobalt
request.ui_dispatch_view = search
description = Web Log User Agent Count by IP
dispatch.earliest_time = 0
action.email.useNSSubject = 1
display.visualizations.show = 0
display.general.type = statistics

[Web Log by IP]
display.page.search.tab = statistics
alert.track = 0
display.visualizations.show = 0
description = Web Log by IP
request.ui_dispatch_view = search
dispatch.earliest_time = 0
search = index=cobalt sourcetype=weblog\
| stats values(request) as request values(user_agent) as user_agent values(status_code) as status_code by ip
action.email.useNSSubject = 1
display.general.type = statistics
description = Web Log by IP
request.ui_dispatch_app = cobalt

[Web Log by IP Map]
display.visualizations.type = mapping
alert.track = 0
display.general.type = visualizations
action.email.useNSSubject = 1
search = index=cobalt sourcetype=weblog request="GET $qpath$" | iplocation ip \
| geostats count by City
display.page.search.tab = visualizations
description = Web Log by IP Map
request.ui_dispatch_view = search
dispatch.earliest_time = 0
display.visualizations.show = 0
request.ui_dispatch_app = cobalt
